{"version":3,"sources":["components/Popup.js","App.js","reportWebVitals.js","index.js"],"names":["Popup","props","trigger","className","onClick","setTrigger","children","App","document","title","useState","buttonPopup","setButtonPopup","setTimedPopup","useEffect","setTimeout","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sPAsBeA,MAnBf,SAAeC,GACX,OAAQA,EAAMC,QACV,qBAAKC,UAAU,+CAAf,SACI,sBAAKA,UAAU,cAAf,UACI,0CACA,gRAEA,uBACA,uBAHA,uIAMA,uBACA,wBAAQA,UAAU,YAAYC,QAAS,kBAAMH,EAAMI,YAAW,IAA9D,mBACCJ,EAAMK,cAGf,I,MCqBOC,MAnCf,WACEC,SAASC,MAAQ,sBACjB,MAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoCF,oBAAS,GAA7C,mBAAmBG,GAAnB,WAQA,OANAC,qBAAU,WACRC,YAAW,WACTF,GAAc,KACb,OACF,IAGD,sBAAKV,UAAU,MAAf,UACE,+BACE,sBAAKA,UAAU,YAAYa,GAAG,YAA9B,UACE,wDACA,uBACA,0FACA,uBACA,wBACEb,UAAU,MACVC,QAAS,kBAAMQ,GAAe,IAFhC,4BAOJ,cAAC,EAAD,CACEV,QAASS,EACTN,WAAYO,QCrBLK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASqB,eAAe,SAM1BZ,M","file":"static/js/main.e328c5b8.chunk.js","sourcesContent":["import React from 'react'\nimport './Popup.css'\n\nfunction Popup(props) {\n    return (props.trigger) ? (\n        <div className=\"popup animate__animated animate__slideInDown\">\n            <div className=\"popup-inner\">\n                <h3>Curious?</h3>\n                <h4>\n                Glassmorphism is a unified name for the popular Frosted Glass aesthetic. It has many names depending on the company using it, so we wanted to create a common ground for designers and developers to find related resources easier and faster.\n                <br></br>\n                <br></br>\n                The effect is based on background blur with transparency, and uses stacked layers to show the depth and context of the interface.\n                </h4>\n                <br></br>\n                <button className=\"close-btn\" onClick={() => props.setTrigger(false)}>Close</button>\n                {props.children}\n            </div>\n        </div>\n    ) : \"\";\n}\n\nexport default Popup;","import Popup from './components/Popup';\nimport './App.css';\nimport React, { useState, useEffect} from 'react'\n\n\nfunction App() {\n  document.title = 'Glassmorphism Popup'\n  const [buttonPopup, setButtonPopup] = useState(false);\n  const [timedPopup, setTimedPopup] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setTimedPopup(true);\n    }, 3000);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <main>\n        <div className=\"container\" id=\"container\">\n          <h1>What is Glassmorphism?</h1>\n          <br></br>\n          <h4>Glassmorphism is a unified name for the popular Frost...</h4>\n          <br></br>\n          <button\n            className=\"btn\"\n            onClick={() => setButtonPopup(true)}>Read More\n          </button>\n        </div>\n        \n      </main>\n      <Popup\n        trigger={buttonPopup}\n        setTrigger={setButtonPopup}\n        >\n      </Popup>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}